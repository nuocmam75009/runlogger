datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  dateOfBirth   DateTime?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  runs          Run[]
  Workout       Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Run {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  distance  Float
  time      Int
  pace      Int
  heartRate Int?
  cadence   Int?
  notes     String?
  createdAt DateTime @default(now())
}

enum WorkoutType {
  RUNNING
  CYCLING
  SWIMMING
  STRENGTH_TRAINING
  YOGA
  HIKING
  CROSS_TRAINING
  SKIING
  INDOOR_CYCLING
  INDOOR_RUNNING
  INDOOR_WALKING
  STAIRMASTER
  TRIATHLON
  TRAIL_RUNNING
  KICKBOXING
  PILATES
  DANSE
  OTHER
}

model Workout {
  id       String      @id @default(uuid())
  userId   String      @map("user_id")
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type     WorkoutType
  distance Float
  duration Int // In minutes
  date     DateTime    @default(now())
  source   WorkoutSource
  gear     String?
  intensity IntensityLevel?
  notes    String?
}

enum WorkoutSource {
  STRAVA
  NIKE_RUN_CLUB
  APPLE_HEALTH
  KIPRUN_PACER
  GARMIN
  COROS
  SUUNTO
  MANUAL
}

enum IntensityLevel {
  EASY
  MODERATE
  HARD
  VERY_HARD
}

enum StravaWorkout {
  athlete_id
  name
  sport_type {
    WeightTraining
    Run
    IndoorBike
    IndoorRun
  }
  intensity: IntensityLevel
  distance
  moving_time
  start_date
  average_speed
  average_heartrate
  max_heartrate
  average_cadence
  average_watts
  max_watts
  has_kudoed
  average_temp
  kudos_count
  comment_count
  athlete_count
  photo_count
  trainer
  location_city
  location_state
  location_country
  private
  visibility
  flagged
  photo_count
  GPX_file
  private
  manual
}